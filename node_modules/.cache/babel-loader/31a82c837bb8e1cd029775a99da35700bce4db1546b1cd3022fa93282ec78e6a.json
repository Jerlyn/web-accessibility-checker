{"ast":null,"code":"// accessibilityEngine.js\n\n/**\n * A comprehensive accessibility analysis engine that examines HTML code\n * for common accessibility issues and provides detailed fixes.\n */\n\n/**\n * Analyze HTML code for accessibility issues\n * @param {string} htmlCode - The HTML code to analyze\n * @returns {Object} Analysis results with issues and fixed code\n */\nexport function analyzeAccessibility(htmlCode) {\n  // Parse the HTML code\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(htmlCode, 'text/html');\n\n  // Initialize results\n  const results = {\n    issues: [],\n    fixedCode: htmlCode\n  };\n\n  // Run all accessibility tests\n  runImageAltTextCheck(doc, results);\n  runHeadingStructureCheck(doc, results);\n  runFormLabelCheck(doc, results);\n  runColorContrastCheck(doc, results);\n  runLinkPurposeCheck(doc, results);\n  runARIACheck(doc, results);\n  runKeyboardNavigationCheck(doc, results);\n  runDocumentLangCheck(doc, results);\n  runButtonRoleCheck(doc, results);\n  runTableStructureCheck(doc, results);\n\n  // Apply all suggested fixes to generate the fixed code\n  results.fixedCode = applyFixes(htmlCode, results.issues);\n  return results;\n}\n\n/**\n * Check for images without alt text\n */\nfunction runImageAltTextCheck(doc, results) {\n  const images = doc.querySelectorAll('img');\n  images.forEach((img, index) => {\n    // Get line and column information (this would be more accurate in a real implementation)\n    const position = estimateElementPosition(img, index);\n    if (!img.hasAttribute('alt')) {\n      results.issues.push({\n        title: 'Missing alt text for image',\n        severity: 'critical',\n        wcagReference: '1.1.1 Non-text Content (Level A)',\n        description: 'Image elements must have an alt attribute that describes the image content or its purpose.',\n        impact: 'Screen reader users will not know what information the image conveys.',\n        position,\n        codeSnippet: getElementOuterHTML(img),\n        fixExample: getElementOuterHTML(img).replace('<img ', '<img alt=\"Descriptive text about this image\" '),\n        learnMoreUrl: 'https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#non-text-content'\n      });\n    } else if (img.getAttribute('alt') === '') {\n      // Empty alt text is only appropriate for decorative images\n      results.issues.push({\n        title: 'Empty alt text - confirm if image is decorative',\n        severity: 'warning',\n        wcagReference: '1.1.1 Non-text Content (Level A)',\n        description: 'This image has empty alt text. This is correct only if the image is purely decorative and conveys no information.',\n        impact: 'If this image conveys information but has empty alt text, screen reader users will miss that information.',\n        position,\n        codeSnippet: getElementOuterHTML(img),\n        fixExample: `<!-- If decorative: -->\n${getElementOuterHTML(img)}\n<!-- If informative: -->\n${getElementOuterHTML(img).replace('alt=\"\"', 'alt=\"Descriptive text about this image\"')}`,\n        learnMoreUrl: 'https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#info-and-relationships'\n      });\n    }\n  });\n}\n\n/**\n * Check for proper heading structure\n */\nfunction runHeadingStructureCheck(doc, results) {\n  const headings = Array.from(doc.querySelectorAll('h1, h2, h3, h4, h5, h6'));\n\n  // Check if there's an H1\n  if (!doc.querySelector('h1')) {\n    results.issues.push({\n      title: 'Missing H1 heading',\n      severity: 'critical',\n      wcagReference: '1.3.1 Info and Relationships (Level A), 2.4.6 Headings and Labels (Level AA)',\n      description: 'Each page should have at least one H1 heading that identifies the page content.',\n      impact: 'Screen reader users rely on headings to understand page structure and navigate content.',\n      position: {\n        line: 1,\n        column: 1\n      },\n      codeSnippet: '<body>\\n  <!-- No H1 heading found -->\\n</body>',\n      fixExample: '<body>\\n  <h1>Main Page Title</h1>\\n  <!-- Rest of the content -->\\n</body>',\n      learnMoreUrl: 'https://www.w3.org/WAI/tutorials/page-structure/headings/'\n    });\n  }\n\n  // Check for skipped heading levels\n  for (let i = 0; i < headings.length - 1; i++) {\n    const currentLevel = parseInt(headings[i].tagName[1]);\n    const nextLevel = parseInt(headings[i + 1].tagName[1]);\n    if (nextLevel > currentLevel + 1) {\n      const position = estimateElementPosition(headings[i + 1], i + 1);\n      results.issues.push({\n        title: `Skipped heading level (H${currentLevel} to H${nextLevel})`,\n        severity: 'warning',\n        wcagReference: '1.3.1 Info and Relationships (Level A), 2.4.6 Headings and Labels (Level AA)',\n        description: `Heading levels should not be skipped. Found H${currentLevel} followed by H${nextLevel}.`,\n        impact: 'Skipped heading levels create confusion in the document structure for screen reader users.',\n        position,\n        codeSnippet: getElementOuterHTML(headings[i + 1]),\n        fixExample: getElementOuterHTML(headings[i + 1]).replace(new RegExp(`<h${nextLevel}`, 'g'), `<h${currentLevel + 1}`).replace(new RegExp(`</h${nextLevel}>`, 'g'), `</h${currentLevel + 1}>`),\n        learnMoreUrl: 'https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#headings-and-labels'\n      });\n    }\n  }\n}\n\n/**\n * Check for form controls without associated labels\n */\nfunction runFormLabelCheck(doc, results) {\n  const formControls = doc.querySelectorAll('input, select, textarea');\n  formControls.forEach((control, index) => {\n    const position = estimateElementPosition(control, index);\n    const id = control.getAttribute('id');\n    const type = control.getAttribute('type') || '';\n\n    // Skip hidden inputs, submit buttons, and elements with aria-label or aria-labelledby\n    if (type === 'hidden' || type === 'submit' || type === 'button' || control.hasAttribute('aria-label') || control.hasAttribute('aria-labelledby')) {\n      return;\n    }\n    if (!id || !doc.querySelector(`label[for=\"${id}\"]`)) {\n      results.issues.push({\n        title: 'Form control without label',\n        severity: 'critical',\n        wcagReference: '1.3.1 Info and Relationships, 3.3.2 Labels or Instructions (Level A)',\n        description: `This ${control.tagName.toLowerCase()} element doesn't have a properly associated label.`,\n        impact: 'Screen reader users will not know the purpose of this form control, making it difficult or impossible to complete the form.',\n        position,\n        codeSnippet: getElementOuterHTML(control),\n        fixExample: !id ? `<label for=\"unique-id\">Label text</label>\\n${getElementOuterHTML(control).replace('<' + control.tagName.toLowerCase(), '<' + control.tagName.toLowerCase() + ' id=\"unique-id\"')}` : `<label for=\"${id}\">Label text</label>\\n${getElementOuterHTML(control)}`,\n        learnMoreUrl: 'https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#labels-or-instructions'\n      });\n    }\n  });\n}\n\n/**\n * Simplified implementation of color contrast check\n * Note: Real implementation would need to parse CSS and calculate actual contrast ratios\n */\nfunction runColorContrastCheck(doc, results) {\n  // This is a very simplified check - a real implementation would involve:\n  // 1. Getting computed styles\n  // 2. Calculating contrast ratios\n  // 3. Checking against WCAG requirements\n\n  // For now, we'll just check for inline styles with potentially problematic colors\n  const elementsWithInlineStyles = doc.querySelectorAll('[style*=\"color\"], [style*=\"background\"]');\n  elementsWithInlineStyles.forEach((element, index) => {\n    const style = element.getAttribute('style');\n    const position = estimateElementPosition(element, index);\n    if (/color:\\s*#([0-9a-f]{3}){1,2}/i.test(style) || /color:\\s*rgb\\(/i.test(style) || /background(-color)?:\\s*#([0-9a-f]{3}){1,2}/i.test(style) || /background(-color)?:\\s*rgb\\(/i.test(style)) {\n      results.issues.push({\n        title: 'Potential color contrast issue',\n        severity: 'warning',\n        wcagReference: '1.4.3 Contrast (Minimum) (Level AA)',\n        description: 'Inline styles with color values detected. Ensure text has sufficient contrast against its background.',\n        impact: 'Users with low vision or color blindness may have difficulty reading text without adequate contrast.',\n        position,\n        codeSnippet: getElementOuterHTML(element),\n        fixExample: `<!-- Ensure a contrast ratio of at least 4.5:1 for normal text and 3:1 for large text -->\\n<!-- Consider using a color contrast checker tool -->`,\n        learnMoreUrl: 'https://webaim.org/resources/contrastchecker/'\n      });\n    }\n  });\n}\n\n/**\n * Check for links with unclear purpose\n */\nfunction runLinkPurposeCheck(doc, results) {\n  const links = doc.querySelectorAll('a');\n  links.forEach((link, index) => {\n    const position = estimateElementPosition(link, index);\n    const linkText = link.textContent.trim();\n\n    // Check for common ambiguous link text\n    const ambiguousTexts = ['click here', 'read more', 'more', 'link', 'here', 'this page', 'learn more'];\n    if (ambiguousTexts.includes(linkText.toLowerCase())) {\n      results.issues.push({\n        title: 'Ambiguous link text',\n        severity: 'warning',\n        wcagReference: '2.4.4 Link Purpose (In Context) (Level A), 2.4.9 Link Purpose (Link Only) (Level AAA)',\n        description: `Link text \"${linkText}\" doesn't clearly indicate its purpose or destination.`,\n        impact: 'Screen reader users often navigate by links, and ambiguous link text makes it difficult to understand where links lead.',\n        position,\n        codeSnippet: getElementOuterHTML(link),\n        fixExample: getElementOuterHTML(link).replace(linkText, `Specific description of link destination`),\n        learnMoreUrl: 'https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#link-purpose-in-context'\n      });\n    }\n\n    // Check for empty links\n    if (linkText === '' && !link.querySelector('img[alt]') && !link.hasAttribute('aria-label') && !link.hasAttribute('aria-labelledby')) {\n      results.issues.push({\n        title: 'Empty link',\n        severity: 'critical',\n        wcagReference: '2.4.4 Link Purpose (In Context) (Level A)',\n        description: 'This link has no text content or accessible name.',\n        impact: 'Screen reader users will not know the purpose of this link.',\n        position,\n        codeSnippet: getElementOuterHTML(link),\n        fixExample: getElementOuterHTML(link).replace('<a ', '<a aria-label=\"Description of link purpose\" '),\n        learnMoreUrl: 'https://www.w3.org/WAI/tutorials/images/decorative/'\n      });\n    }\n  });\n}\n\n/**\n * Check for proper ARIA usage\n */\nfunction runARIACheck(doc, results) {\n  // Check for invalid ARIA roles\n  const elementsWithRoles = doc.querySelectorAll('[role]');\n\n  // List of valid ARIA roles\n  const validRoles = ['alert', 'alertdialog', 'application', 'article', 'banner', 'button', 'cell', 'checkbox', 'columnheader', 'combobox', 'complementary', 'contentinfo', 'definition', 'dialog', 'directory', 'document', 'feed', 'figure', 'form', 'grid', 'gridcell', 'group', 'heading', 'img', 'link', 'list', 'listbox', 'listitem', 'log', 'main', 'marquee', 'math', 'menu', 'menubar', 'menuitem', 'menuitemcheckbox', 'menuitemradio', 'navigation', 'none', 'note', 'option', 'presentation', 'progressbar', 'radio', 'radiogroup', 'region', 'row', 'rowgroup', 'rowheader', 'scrollbar', 'search', 'searchbox', 'separator', 'slider', 'spinbutton', 'status', 'switch', 'tab', 'table', 'tablist', 'tabpanel', 'term', 'textbox', 'timer', 'toolbar', 'tooltip', 'tree', 'treegrid', 'treeitem'];\n  elementsWithRoles.forEach((element, index) => {\n    const role = element.getAttribute('role');\n    const position = estimateElementPosition(element, index);\n    if (!validRoles.includes(role)) {\n      results.issues.push({\n        title: 'Invalid ARIA role',\n        severity: 'critical',\n        wcagReference: '4.1.2 Name, Role, Value (Level A)',\n        description: `The role \"${role}\" is not a valid ARIA role.`,\n        impact: 'Assistive technologies rely on valid roles to communicate the purpose of elements to users.',\n        position,\n        codeSnippet: getElementOuterHTML(element),\n        fixExample: getElementOuterHTML(element).replace(`role=\"${role}\"`, `role=\"[appropriate valid role]\"`),\n        learnMoreUrl: 'https://www.w3.org/TR/wai-aria-1.1/#role_definitions'\n      });\n    }\n  });\n\n  // Check for required ARIA attributes\n  const elementsWithRelevantRoles = doc.querySelectorAll('[role=\"checkbox\"], [role=\"combobox\"], [role=\"slider\"], [role=\"spinbutton\"]');\n  elementsWithRelevantRoles.forEach((element, index) => {\n    const role = element.getAttribute('role');\n    const position = estimateElementPosition(element, index);\n    if (!element.hasAttribute('aria-checked') && role === 'checkbox') {\n      results.issues.push({\n        title: 'Missing required ARIA attribute',\n        severity: 'critical',\n        wcagReference: '4.1.2 Name, Role, Value (Level A)',\n        description: 'Elements with role=\"checkbox\" must have an aria-checked attribute.',\n        impact: 'Screen reader users will not know the state of this checkbox.',\n        position,\n        codeSnippet: getElementOuterHTML(element),\n        fixExample: getElementOuterHTML(element).replace(`role=\"checkbox\"`, `role=\"checkbox\" aria-checked=\"false\"`),\n        learnMoreUrl: 'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/checkbox_role'\n      });\n    }\n    if (!element.hasAttribute('aria-valuemin') && (role === 'slider' || role === 'spinbutton')) {\n      results.issues.push({\n        title: 'Missing required ARIA attribute',\n        severity: 'critical',\n        wcagReference: '4.1.2 Name, Role, Value (Level A)',\n        description: `Elements with role=\"${role}\" must have aria-valuemin, aria-valuemax, and aria-valuenow attributes.`,\n        impact: 'Screen reader users will not know the range and current value of this control.',\n        position,\n        codeSnippet: getElementOuterHTML(element),\n        fixExample: getElementOuterHTML(element).replace(`role=\"${role}\"`, `role=\"${role}\" aria-valuemin=\"0\" aria-valuemax=\"100\" aria-valuenow=\"50\"`),\n        learnMoreUrl: `https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/${role}_role`\n      });\n    }\n  });\n}\n\n/**\n * Check for keyboard navigability issues\n */\nfunction runKeyboardNavigationCheck(doc, results) {\n  // Check for tabindex values greater than 0\n  const elementsWithHighTabindex = doc.querySelectorAll('[tabindex]');\n  elementsWithHighTabindex.forEach((element, index) => {\n    const tabindex = parseInt(element.getAttribute('tabindex'));\n    const position = estimateElementPosition(element, index);\n    if (tabindex > 0) {\n      results.issues.push({\n        title: 'Positive tabindex value',\n        severity: 'warning',\n        wcagReference: '2.1.1 Keyboard (Level A), 2.4.3 Focus Order (Level A)',\n        description: `This element has tabindex=\"${tabindex}\". Positive tabindex values create a custom tab order that may be confusing.`,\n        impact: 'Keyboard users may experience an unexpected navigation order, making the page difficult to use.',\n        position,\n        codeSnippet: getElementOuterHTML(element),\n        fixExample: getElementOuterHTML(element).replace(`tabindex=\"${tabindex}\"`, `tabindex=\"0\"`),\n        learnMoreUrl: 'https://www.w3.org/WAI/WCAG21/Techniques/html/H4'\n      });\n    }\n  });\n\n  // Check for potentially inaccessible custom controls\n  const customControls = doc.querySelectorAll('div[onclick], span[onclick]');\n  customControls.forEach((element, index) => {\n    const position = estimateElementPosition(element, index);\n    if (!element.hasAttribute('tabindex') && !element.hasAttribute('role')) {\n      results.issues.push({\n        title: 'Inaccessible custom control',\n        severity: 'critical',\n        wcagReference: '2.1.1 Keyboard (Level A), 4.1.2 Name, Role, Value (Level A)',\n        description: 'This element has click handlers but is not keyboard accessible and has no ARIA role.',\n        impact: 'Keyboard users and screen reader users cannot access this interactive element.',\n        position,\n        codeSnippet: getElementOuterHTML(element),\n        fixExample: getElementOuterHTML(element).replace('<div', '<div role=\"button\" tabindex=\"0\" onkeydown=\"if(event.key === \\'Enter\\') this.click()\"').replace('<span', '<span role=\"button\" tabindex=\"0\" onkeydown=\"if(event.key === \\'Enter\\') this.click()\"'),\n        learnMoreUrl: 'https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#name-role-value'\n      });\n    }\n  });\n}\n\n/**\n * Check for document language\n */\nfunction runDocumentLangCheck(doc, results) {\n  const html = doc.querySelector('html');\n  if (!html.hasAttribute('lang')) {\n    results.issues.push({\n      title: 'Missing language attribute',\n      severity: 'critical',\n      wcagReference: '3.1.1 Language of Page (Level A)',\n      description: 'The HTML element should have a lang attribute that identifies the language of the page.',\n      impact: 'Screen readers need the language attribute to correctly pronounce and interpret content.',\n      position: {\n        line: 1,\n        column: 1\n      },\n      codeSnippet: getElementOuterHTML(html).substring(0, 50) + '...',\n      fixExample: getElementOuterHTML(html).replace('<html', '<html lang=\"en\"'),\n      learnMoreUrl: 'https://www.w3.org/WAI/WCAG21/Techniques/html/H57'\n    });\n  }\n}\n\n/**\n * Check for div/span elements used as buttons\n */\nfunction runButtonRoleCheck(doc, results) {\n  // Find elements that might be functioning as buttons\n  const fakeButtons = doc.querySelectorAll('div[class*=\"button\"], span[class*=\"button\"], div[class*=\"btn\"], span[class*=\"btn\"]');\n  fakeButtons.forEach((element, index) => {\n    const position = estimateElementPosition(element, index);\n    if (!element.hasAttribute('role')) {\n      results.issues.push({\n        title: 'Div/span used as button without proper role',\n        severity: 'critical',\n        wcagReference: '4.1.2 Name, Role, Value (Level A)',\n        description: 'This element appears to be used as a button but doesn\\'t have the button role.',\n        impact: 'Screen reader users will not know this element is a button.',\n        position,\n        codeSnippet: getElementOuterHTML(element),\n        fixExample: `<!-- Better solution: Use a real button element -->\n<button class=\"${element.className}\">${element.innerHTML}</button>\n\n<!-- Alternative: Add proper ARIA role and keyboard support -->\n${getElementOuterHTML(element).replace(`<${element.tagName.toLowerCase()}`, `<${element.tagName.toLowerCase()} role=\"button\" tabindex=\"0\" onkeydown=\"if(event.key === 'Enter') this.click()\"`)}`,\n        learnMoreUrl: 'https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#keyboard'\n      });\n    }\n  });\n}\n\n/**\n * Check for proper table structure\n */\nfunction runTableStructureCheck(doc, results) {\n  const tables = doc.querySelectorAll('table');\n  tables.forEach((table, index) => {\n    const position = estimateElementPosition(table, index);\n\n    // Check for data tables without headers\n    if (table.querySelectorAll('td').length > 0 && table.querySelectorAll('th').length === 0) {\n      results.issues.push({\n        title: 'Table missing headers',\n        severity: 'warning',\n        wcagReference: '1.3.1 Info and Relationships (Level A)',\n        description: 'This table appears to be a data table but has no header cells (th elements).',\n        impact: 'Screen reader users will not know the relationship between header and data cells.',\n        position,\n        codeSnippet: getElementOuterHTML(table).substring(0, 150) + '...',\n        fixExample: `<table>\n  <thead>\n    <tr>\n      <th scope=\"col\">Header 1</th>\n      <th scope=\"col\">Header 2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Data 1</td>\n      <td>Data 2</td>\n    </tr>\n  </tbody>\n</table>`,\n        learnMoreUrl: 'https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#focus-order'\n      });\n    }\n\n    // Check for tables used for layout\n    if (table.querySelectorAll('th').length === 0 && !table.hasAttribute('role') && table.querySelectorAll('table').length === 0) {\n      results.issues.push({\n        title: 'Table potentially used for layout',\n        severity: 'info',\n        wcagReference: '1.3.1 Info and Relationships (Level A)',\n        description: 'This table might be used for layout purposes. If so, it should have role=\"presentation\" or role=\"none\".',\n        impact: 'Screen readers announce layout tables as tables, which can confuse users when they\\'re used for visual layout only.',\n        position,\n        codeSnippet: getElementOuterHTML(table).substring(0, 150) + '...',\n        fixExample: `<!-- If this is a layout table: -->\n<table role=\"presentation\">\n  <!-- table content -->\n</table>\n\n<!-- Better modern solution: Use CSS for layout instead of tables -->`,\n        learnMoreUrl: 'https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#language-of-page'\n      });\n    }\n  });\n}\n\n/**\n * Helper function to estimate the position of an element\n * In a real implementation, this would be more accurate\n */\nfunction estimateElementPosition(element, index) {\n  // This is a simplification - a real implementation would \n  // parse the actual HTML to get accurate line and column\n  return {\n    line: index + 1,\n    column: 1\n  };\n}\n\n/**\n * Get the outer HTML of an element \n * Handles potential serialization issues\n */\nfunction getElementOuterHTML(element) {\n  try {\n    return element.outerHTML;\n  } catch (e) {\n    return `<${element.tagName.toLowerCase()}>...</${element.tagName.toLowerCase()}>`;\n  }\n}\n\n/**\n * Apply all fixes to the original HTML code\n * This is simplified - a real implementation would be more sophisticated\n */\nfunction applyFixes(originalHtml, issues) {\n  // This is a very simplified approach - a real implementation would need\n  // to parse the HTML and make targeted changes with proper validation\n\n  let fixedHtml = originalHtml;\n\n  // Apply simple text replacements for demonstration\n  // In reality, you'd need a proper HTML parser and modifier\n  issues.forEach(issue => {\n    if (issue.codeSnippet && issue.fixExample && !issue.fixExample.includes('<!-- ')) {\n      fixedHtml = fixedHtml.replace(issue.codeSnippet, issue.fixExample);\n    }\n  });\n  return fixedHtml;\n}","map":{"version":3,"names":["analyzeAccessibility","htmlCode","parser","DOMParser","doc","parseFromString","results","issues","fixedCode","runImageAltTextCheck","runHeadingStructureCheck","runFormLabelCheck","runColorContrastCheck","runLinkPurposeCheck","runARIACheck","runKeyboardNavigationCheck","runDocumentLangCheck","runButtonRoleCheck","runTableStructureCheck","applyFixes","images","querySelectorAll","forEach","img","index","position","estimateElementPosition","hasAttribute","push","title","severity","wcagReference","description","impact","codeSnippet","getElementOuterHTML","fixExample","replace","learnMoreUrl","getAttribute","headings","Array","from","querySelector","line","column","i","length","currentLevel","parseInt","tagName","nextLevel","RegExp","formControls","control","id","type","toLowerCase","elementsWithInlineStyles","element","style","test","links","link","linkText","textContent","trim","ambiguousTexts","includes","elementsWithRoles","validRoles","role","elementsWithRelevantRoles","elementsWithHighTabindex","tabindex","customControls","html","substring","fakeButtons","className","innerHTML","tables","table","outerHTML","e","originalHtml","fixedHtml","issue"],"sources":["/Users/jerlynodonnell/Documents/web-accessibility-checker/src/engine/accessibilityEngine.js"],"sourcesContent":["// accessibilityEngine.js\n\n/**\n * A comprehensive accessibility analysis engine that examines HTML code\n * for common accessibility issues and provides detailed fixes.\n */\n\n/**\n * Analyze HTML code for accessibility issues\n * @param {string} htmlCode - The HTML code to analyze\n * @returns {Object} Analysis results with issues and fixed code\n */\nexport function analyzeAccessibility(htmlCode) {\n  // Parse the HTML code\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(htmlCode, 'text/html');\n  \n  // Initialize results\n  const results = {\n    issues: [],\n    fixedCode: htmlCode,\n  };\n  \n  // Run all accessibility tests\n  runImageAltTextCheck(doc, results);\n  runHeadingStructureCheck(doc, results);\n  runFormLabelCheck(doc, results);\n  runColorContrastCheck(doc, results);\n  runLinkPurposeCheck(doc, results);\n  runARIACheck(doc, results);\n  runKeyboardNavigationCheck(doc, results);\n  runDocumentLangCheck(doc, results);\n  runButtonRoleCheck(doc, results);\n  runTableStructureCheck(doc, results);\n  \n  // Apply all suggested fixes to generate the fixed code\n  results.fixedCode = applyFixes(htmlCode, results.issues);\n  \n  return results;\n}\n\n/**\n * Check for images without alt text\n */\nfunction runImageAltTextCheck(doc, results) {\n  const images = doc.querySelectorAll('img');\n  \n  images.forEach((img, index) => {\n    // Get line and column information (this would be more accurate in a real implementation)\n    const position = estimateElementPosition(img, index);\n    \n    if (!img.hasAttribute('alt')) {\n      results.issues.push({\n        title: 'Missing alt text for image',\n        severity: 'critical',\n        wcagReference: '1.1.1 Non-text Content (Level A)',\n        description: 'Image elements must have an alt attribute that describes the image content or its purpose.',\n        impact: 'Screen reader users will not know what information the image conveys.',\n        position,\n        codeSnippet: getElementOuterHTML(img),\n        fixExample: getElementOuterHTML(img).replace('<img ', '<img alt=\"Descriptive text about this image\" '),\n        learnMoreUrl: 'https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#non-text-content',\n      });\n    } else if (img.getAttribute('alt') === '') {\n      // Empty alt text is only appropriate for decorative images\n      results.issues.push({\n        title: 'Empty alt text - confirm if image is decorative',\n        severity: 'warning',\n        wcagReference: '1.1.1 Non-text Content (Level A)',\n        description: 'This image has empty alt text. This is correct only if the image is purely decorative and conveys no information.',\n        impact: 'If this image conveys information but has empty alt text, screen reader users will miss that information.',\n        position,\n        codeSnippet: getElementOuterHTML(img),\n        fixExample: `<!-- If decorative: -->\n${getElementOuterHTML(img)}\n<!-- If informative: -->\n${getElementOuterHTML(img).replace('alt=\"\"', 'alt=\"Descriptive text about this image\"')}`,\n        learnMoreUrl: 'https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#info-and-relationships',\n      });\n    }\n  });\n}\n\n/**\n * Check for proper heading structure\n */\nfunction runHeadingStructureCheck(doc, results) {\n  const headings = Array.from(doc.querySelectorAll('h1, h2, h3, h4, h5, h6'));\n  \n  // Check if there's an H1\n  if (!doc.querySelector('h1')) {\n    results.issues.push({\n      title: 'Missing H1 heading',\n      severity: 'critical',\n      wcagReference: '1.3.1 Info and Relationships (Level A), 2.4.6 Headings and Labels (Level AA)',\n      description: 'Each page should have at least one H1 heading that identifies the page content.',\n      impact: 'Screen reader users rely on headings to understand page structure and navigate content.',\n      position: { line: 1, column: 1 },\n      codeSnippet: '<body>\\n  <!-- No H1 heading found -->\\n</body>',\n      fixExample: '<body>\\n  <h1>Main Page Title</h1>\\n  <!-- Rest of the content -->\\n</body>',\n      learnMoreUrl: 'https://www.w3.org/WAI/tutorials/page-structure/headings/',\n    });\n  }\n  \n  // Check for skipped heading levels\n  for (let i = 0; i < headings.length - 1; i++) {\n    const currentLevel = parseInt(headings[i].tagName[1]);\n    const nextLevel = parseInt(headings[i + 1].tagName[1]);\n    \n    if (nextLevel > currentLevel + 1) {\n      const position = estimateElementPosition(headings[i + 1], i + 1);\n      \n      results.issues.push({\n        title: `Skipped heading level (H${currentLevel} to H${nextLevel})`,\n        severity: 'warning',\n        wcagReference: '1.3.1 Info and Relationships (Level A), 2.4.6 Headings and Labels (Level AA)',\n        description: `Heading levels should not be skipped. Found H${currentLevel} followed by H${nextLevel}.`,\n        impact: 'Skipped heading levels create confusion in the document structure for screen reader users.',\n        position,\n        codeSnippet: getElementOuterHTML(headings[i + 1]),\n        fixExample: getElementOuterHTML(headings[i + 1]).replace(\n          new RegExp(`<h${nextLevel}`, 'g'), \n          `<h${currentLevel + 1}`\n        ).replace(\n          new RegExp(`</h${nextLevel}>`, 'g'), \n          `</h${currentLevel + 1}>`\n        ),\n        learnMoreUrl: 'https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#headings-and-labels',\n      });\n    }\n  }\n}\n\n/**\n * Check for form controls without associated labels\n */\nfunction runFormLabelCheck(doc, results) {\n  const formControls = doc.querySelectorAll('input, select, textarea');\n  \n  formControls.forEach((control, index) => {\n    const position = estimateElementPosition(control, index);\n    const id = control.getAttribute('id');\n    const type = control.getAttribute('type') || '';\n    \n    // Skip hidden inputs, submit buttons, and elements with aria-label or aria-labelledby\n    if (\n      type === 'hidden' || \n      type === 'submit' || \n      type === 'button' ||\n      control.hasAttribute('aria-label') || \n      control.hasAttribute('aria-labelledby')\n    ) {\n      return;\n    }\n    \n    if (!id || !doc.querySelector(`label[for=\"${id}\"]`)) {\n      results.issues.push({\n        title: 'Form control without label',\n        severity: 'critical',\n        wcagReference: '1.3.1 Info and Relationships, 3.3.2 Labels or Instructions (Level A)',\n        description: `This ${control.tagName.toLowerCase()} element doesn't have a properly associated label.`,\n        impact: 'Screen reader users will not know the purpose of this form control, making it difficult or impossible to complete the form.',\n        position,\n        codeSnippet: getElementOuterHTML(control),\n        fixExample: !id \n          ? `<label for=\"unique-id\">Label text</label>\\n${getElementOuterHTML(control).replace('<' + control.tagName.toLowerCase(), '<' + control.tagName.toLowerCase() + ' id=\"unique-id\"')}` \n          : `<label for=\"${id}\">Label text</label>\\n${getElementOuterHTML(control)}`,\n        learnMoreUrl: 'https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#labels-or-instructions',\n      });\n    }\n  });\n}\n\n/**\n * Simplified implementation of color contrast check\n * Note: Real implementation would need to parse CSS and calculate actual contrast ratios\n */\nfunction runColorContrastCheck(doc, results) {\n  // This is a very simplified check - a real implementation would involve:\n  // 1. Getting computed styles\n  // 2. Calculating contrast ratios\n  // 3. Checking against WCAG requirements\n  \n  // For now, we'll just check for inline styles with potentially problematic colors\n  const elementsWithInlineStyles = doc.querySelectorAll('[style*=\"color\"], [style*=\"background\"]');\n  \n  elementsWithInlineStyles.forEach((element, index) => {\n    const style = element.getAttribute('style');\n    const position = estimateElementPosition(element, index);\n    \n    if (\n      /color:\\s*#([0-9a-f]{3}){1,2}/i.test(style) || \n      /color:\\s*rgb\\(/i.test(style) ||\n      /background(-color)?:\\s*#([0-9a-f]{3}){1,2}/i.test(style) ||\n      /background(-color)?:\\s*rgb\\(/i.test(style)\n    ) {\n      results.issues.push({\n        title: 'Potential color contrast issue',\n        severity: 'warning',\n        wcagReference: '1.4.3 Contrast (Minimum) (Level AA)',\n        description: 'Inline styles with color values detected. Ensure text has sufficient contrast against its background.',\n        impact: 'Users with low vision or color blindness may have difficulty reading text without adequate contrast.',\n        position,\n        codeSnippet: getElementOuterHTML(element),\n        fixExample: `<!-- Ensure a contrast ratio of at least 4.5:1 for normal text and 3:1 for large text -->\\n<!-- Consider using a color contrast checker tool -->`,\n        learnMoreUrl: 'https://webaim.org/resources/contrastchecker/',\n      });\n    }\n  });\n}\n\n/**\n * Check for links with unclear purpose\n */\nfunction runLinkPurposeCheck(doc, results) {\n  const links = doc.querySelectorAll('a');\n  \n  links.forEach((link, index) => {\n    const position = estimateElementPosition(link, index);\n    const linkText = link.textContent.trim();\n    \n    // Check for common ambiguous link text\n    const ambiguousTexts = ['click here', 'read more', 'more', 'link', 'here', 'this page', 'learn more'];\n    \n    if (ambiguousTexts.includes(linkText.toLowerCase())) {\n      results.issues.push({\n        title: 'Ambiguous link text',\n        severity: 'warning',\n        wcagReference: '2.4.4 Link Purpose (In Context) (Level A), 2.4.9 Link Purpose (Link Only) (Level AAA)',\n        description: `Link text \"${linkText}\" doesn't clearly indicate its purpose or destination.`,\n        impact: 'Screen reader users often navigate by links, and ambiguous link text makes it difficult to understand where links lead.',\n        position,\n        codeSnippet: getElementOuterHTML(link),\n        fixExample: getElementOuterHTML(link).replace(\n          linkText, \n          `Specific description of link destination`\n        ),\n        learnMoreUrl: 'https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#link-purpose-in-context',\n      });\n    }\n    \n    // Check for empty links\n    if (linkText === '' && !link.querySelector('img[alt]') && !link.hasAttribute('aria-label') && !link.hasAttribute('aria-labelledby')) {\n      results.issues.push({\n        title: 'Empty link',\n        severity: 'critical',\n        wcagReference: '2.4.4 Link Purpose (In Context) (Level A)',\n        description: 'This link has no text content or accessible name.',\n        impact: 'Screen reader users will not know the purpose of this link.',\n        position,\n        codeSnippet: getElementOuterHTML(link),\n        fixExample: getElementOuterHTML(link).replace(\n          '<a ', \n          '<a aria-label=\"Description of link purpose\" '\n        ),\n        learnMoreUrl: 'https://www.w3.org/WAI/tutorials/images/decorative/',\n      });\n    }\n  });\n}\n\n/**\n * Check for proper ARIA usage\n */\nfunction runARIACheck(doc, results) {\n  // Check for invalid ARIA roles\n  const elementsWithRoles = doc.querySelectorAll('[role]');\n  \n  // List of valid ARIA roles\n  const validRoles = [\n    'alert', 'alertdialog', 'application', 'article', 'banner', 'button', 'cell', 'checkbox',\n    'columnheader', 'combobox', 'complementary', 'contentinfo', 'definition', 'dialog', \n    'directory', 'document', 'feed', 'figure', 'form', 'grid', 'gridcell', 'group', 'heading',\n    'img', 'link', 'list', 'listbox', 'listitem', 'log', 'main', 'marquee', 'math', 'menu',\n    'menubar', 'menuitem', 'menuitemcheckbox', 'menuitemradio', 'navigation', 'none',\n    'note', 'option', 'presentation', 'progressbar', 'radio', 'radiogroup', 'region',\n    'row', 'rowgroup', 'rowheader', 'scrollbar', 'search', 'searchbox', 'separator', 'slider',\n    'spinbutton', 'status', 'switch', 'tab', 'table', 'tablist', 'tabpanel', 'term',\n    'textbox', 'timer', 'toolbar', 'tooltip', 'tree', 'treegrid', 'treeitem'\n  ];\n  \n  elementsWithRoles.forEach((element, index) => {\n    const role = element.getAttribute('role');\n    const position = estimateElementPosition(element, index);\n    \n    if (!validRoles.includes(role)) {\n      results.issues.push({\n        title: 'Invalid ARIA role',\n        severity: 'critical',\n        wcagReference: '4.1.2 Name, Role, Value (Level A)',\n        description: `The role \"${role}\" is not a valid ARIA role.`,\n        impact: 'Assistive technologies rely on valid roles to communicate the purpose of elements to users.',\n        position,\n        codeSnippet: getElementOuterHTML(element),\n        fixExample: getElementOuterHTML(element).replace(\n          `role=\"${role}\"`, \n          `role=\"[appropriate valid role]\"`\n        ),\n        learnMoreUrl: 'https://www.w3.org/TR/wai-aria-1.1/#role_definitions',\n      });\n    }\n  });\n  \n  // Check for required ARIA attributes\n  const elementsWithRelevantRoles = doc.querySelectorAll('[role=\"checkbox\"], [role=\"combobox\"], [role=\"slider\"], [role=\"spinbutton\"]');\n  \n  elementsWithRelevantRoles.forEach((element, index) => {\n    const role = element.getAttribute('role');\n    const position = estimateElementPosition(element, index);\n    \n    if (!element.hasAttribute('aria-checked') && role === 'checkbox') {\n      results.issues.push({\n        title: 'Missing required ARIA attribute',\n        severity: 'critical',\n        wcagReference: '4.1.2 Name, Role, Value (Level A)',\n        description: 'Elements with role=\"checkbox\" must have an aria-checked attribute.',\n        impact: 'Screen reader users will not know the state of this checkbox.',\n        position,\n        codeSnippet: getElementOuterHTML(element),\n        fixExample: getElementOuterHTML(element).replace(\n          `role=\"checkbox\"`, \n          `role=\"checkbox\" aria-checked=\"false\"`\n        ),\n        learnMoreUrl: 'https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/checkbox_role',\n      });\n    }\n    \n    if (!element.hasAttribute('aria-valuemin') && (role === 'slider' || role === 'spinbutton')) {\n      results.issues.push({\n        title: 'Missing required ARIA attribute',\n        severity: 'critical',\n        wcagReference: '4.1.2 Name, Role, Value (Level A)',\n        description: `Elements with role=\"${role}\" must have aria-valuemin, aria-valuemax, and aria-valuenow attributes.`,\n        impact: 'Screen reader users will not know the range and current value of this control.',\n        position,\n        codeSnippet: getElementOuterHTML(element),\n        fixExample: getElementOuterHTML(element).replace(\n          `role=\"${role}\"`, \n          `role=\"${role}\" aria-valuemin=\"0\" aria-valuemax=\"100\" aria-valuenow=\"50\"`\n        ),\n        learnMoreUrl: `https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/${role}_role`,\n      });\n    }\n  });\n}\n\n/**\n * Check for keyboard navigability issues\n */\nfunction runKeyboardNavigationCheck(doc, results) {\n  // Check for tabindex values greater than 0\n  const elementsWithHighTabindex = doc.querySelectorAll('[tabindex]');\n  \n  elementsWithHighTabindex.forEach((element, index) => {\n    const tabindex = parseInt(element.getAttribute('tabindex'));\n    const position = estimateElementPosition(element, index);\n    \n    if (tabindex > 0) {\n      results.issues.push({\n        title: 'Positive tabindex value',\n        severity: 'warning',\n        wcagReference: '2.1.1 Keyboard (Level A), 2.4.3 Focus Order (Level A)',\n        description: `This element has tabindex=\"${tabindex}\". Positive tabindex values create a custom tab order that may be confusing.`,\n        impact: 'Keyboard users may experience an unexpected navigation order, making the page difficult to use.',\n        position,\n        codeSnippet: getElementOuterHTML(element),\n        fixExample: getElementOuterHTML(element).replace(\n          `tabindex=\"${tabindex}\"`, \n          `tabindex=\"0\"`\n        ),\n        learnMoreUrl: 'https://www.w3.org/WAI/WCAG21/Techniques/html/H4',\n      });\n    }\n  });\n  \n  // Check for potentially inaccessible custom controls\n  const customControls = doc.querySelectorAll('div[onclick], span[onclick]');\n  \n  customControls.forEach((element, index) => {\n    const position = estimateElementPosition(element, index);\n    \n    if (!element.hasAttribute('tabindex') && !element.hasAttribute('role')) {\n      results.issues.push({\n        title: 'Inaccessible custom control',\n        severity: 'critical',\n        wcagReference: '2.1.1 Keyboard (Level A), 4.1.2 Name, Role, Value (Level A)',\n        description: 'This element has click handlers but is not keyboard accessible and has no ARIA role.',\n        impact: 'Keyboard users and screen reader users cannot access this interactive element.',\n        position,\n        codeSnippet: getElementOuterHTML(element),\n        fixExample: getElementOuterHTML(element)\n          .replace('<div', '<div role=\"button\" tabindex=\"0\" onkeydown=\"if(event.key === \\'Enter\\') this.click()\"')\n          .replace('<span', '<span role=\"button\" tabindex=\"0\" onkeydown=\"if(event.key === \\'Enter\\') this.click()\"'),\n        learnMoreUrl: 'https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#name-role-value',\n      });\n    }\n  });\n}\n\n/**\n * Check for document language\n */\nfunction runDocumentLangCheck(doc, results) {\n  const html = doc.querySelector('html');\n  \n  if (!html.hasAttribute('lang')) {\n    results.issues.push({\n      title: 'Missing language attribute',\n      severity: 'critical',\n      wcagReference: '3.1.1 Language of Page (Level A)',\n      description: 'The HTML element should have a lang attribute that identifies the language of the page.',\n      impact: 'Screen readers need the language attribute to correctly pronounce and interpret content.',\n      position: { line: 1, column: 1 },\n      codeSnippet: getElementOuterHTML(html).substring(0, 50) + '...',\n      fixExample: getElementOuterHTML(html).replace('<html', '<html lang=\"en\"'),\n      learnMoreUrl: 'https://www.w3.org/WAI/WCAG21/Techniques/html/H57',\n    });\n  }\n}\n\n/**\n * Check for div/span elements used as buttons\n */\nfunction runButtonRoleCheck(doc, results) {\n  // Find elements that might be functioning as buttons\n  const fakeButtons = doc.querySelectorAll('div[class*=\"button\"], span[class*=\"button\"], div[class*=\"btn\"], span[class*=\"btn\"]');\n  \n  fakeButtons.forEach((element, index) => {\n    const position = estimateElementPosition(element, index);\n    \n    if (!element.hasAttribute('role')) {\n      results.issues.push({\n        title: 'Div/span used as button without proper role',\n        severity: 'critical',\n        wcagReference: '4.1.2 Name, Role, Value (Level A)',\n        description: 'This element appears to be used as a button but doesn\\'t have the button role.',\n        impact: 'Screen reader users will not know this element is a button.',\n        position,\n        codeSnippet: getElementOuterHTML(element),\n        fixExample: `<!-- Better solution: Use a real button element -->\n<button class=\"${element.className}\">${element.innerHTML}</button>\n\n<!-- Alternative: Add proper ARIA role and keyboard support -->\n${getElementOuterHTML(element)\n  .replace(`<${element.tagName.toLowerCase()}`, \n  `<${element.tagName.toLowerCase()} role=\"button\" tabindex=\"0\" onkeydown=\"if(event.key === 'Enter') this.click()\"`)}`,\n        learnMoreUrl: 'https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#keyboard',\n      });\n    }\n  });\n}\n\n/**\n * Check for proper table structure\n */\nfunction runTableStructureCheck(doc, results) {\n  const tables = doc.querySelectorAll('table');\n  \n  tables.forEach((table, index) => {\n    const position = estimateElementPosition(table, index);\n    \n    // Check for data tables without headers\n    if (table.querySelectorAll('td').length > 0 && table.querySelectorAll('th').length === 0) {\n      results.issues.push({\n        title: 'Table missing headers',\n        severity: 'warning',\n        wcagReference: '1.3.1 Info and Relationships (Level A)',\n        description: 'This table appears to be a data table but has no header cells (th elements).',\n        impact: 'Screen reader users will not know the relationship between header and data cells.',\n        position,\n        codeSnippet: getElementOuterHTML(table).substring(0, 150) + '...',\n        fixExample: `<table>\n  <thead>\n    <tr>\n      <th scope=\"col\">Header 1</th>\n      <th scope=\"col\">Header 2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Data 1</td>\n      <td>Data 2</td>\n    </tr>\n  </tbody>\n</table>`,\n        learnMoreUrl: 'https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#focus-order',\n      });\n    }\n    \n    // Check for tables used for layout\n    if (\n      table.querySelectorAll('th').length === 0 && \n      !table.hasAttribute('role') && \n      table.querySelectorAll('table').length === 0\n    ) {\n      results.issues.push({\n        title: 'Table potentially used for layout',\n        severity: 'info',\n        wcagReference: '1.3.1 Info and Relationships (Level A)',\n        description: 'This table might be used for layout purposes. If so, it should have role=\"presentation\" or role=\"none\".',\n        impact: 'Screen readers announce layout tables as tables, which can confuse users when they\\'re used for visual layout only.',\n        position,\n        codeSnippet: getElementOuterHTML(table).substring(0, 150) + '...',\n        fixExample: `<!-- If this is a layout table: -->\n<table role=\"presentation\">\n  <!-- table content -->\n</table>\n\n<!-- Better modern solution: Use CSS for layout instead of tables -->`,\n        learnMoreUrl: 'https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#language-of-page',\n      });\n    }\n  });\n}\n\n/**\n * Helper function to estimate the position of an element\n * In a real implementation, this would be more accurate\n */\nfunction estimateElementPosition(element, index) {\n  // This is a simplification - a real implementation would \n  // parse the actual HTML to get accurate line and column\n  return {\n    line: index + 1,\n    column: 1\n  };\n}\n\n/**\n * Get the outer HTML of an element \n * Handles potential serialization issues\n */\nfunction getElementOuterHTML(element) {\n  try {\n    return element.outerHTML;\n  } catch (e) {\n    return `<${element.tagName.toLowerCase()}>...</${element.tagName.toLowerCase()}>`;\n  }\n}\n\n/**\n * Apply all fixes to the original HTML code\n * This is simplified - a real implementation would be more sophisticated\n */\nfunction applyFixes(originalHtml, issues) {\n  // This is a very simplified approach - a real implementation would need\n  // to parse the HTML and make targeted changes with proper validation\n  \n  let fixedHtml = originalHtml;\n  \n  // Apply simple text replacements for demonstration\n  // In reality, you'd need a proper HTML parser and modifier\n  issues.forEach(issue => {\n    if (issue.codeSnippet && issue.fixExample && !issue.fixExample.includes('<!-- ')) {\n      fixedHtml = fixedHtml.replace(issue.codeSnippet, issue.fixExample);\n    }\n  });\n  \n  return fixedHtml;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}